// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieGraphs.Data;

#nullable disable

namespace MovieGraphs.Data.Migrations.Sqlite
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("MovieGraphs.Data.Entities.GraphEdgeEntity", b =>
                {
                    b.Property<long>("SourceNodeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("source_node_id");

                    b.Property<long>("TargetNodeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("target_node_id");

                    b.HasKey("SourceNodeId", "TargetNodeId");

                    b.HasIndex("TargetNodeId");

                    b.ToTable("graph_edges", (string)null);
                });

            modelBuilder.Entity("MovieGraphs.Data.Entities.GraphEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("graphs", (string)null);
                });

            modelBuilder.Entity("MovieGraphs.Data.Entities.GraphNodeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<long>("GraphId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("graph_id");

                    b.Property<long>("ImageId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("image_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<bool>("Watched")
                        .HasColumnType("INTEGER")
                        .HasColumnName("watched");

                    b.HasKey("Id");

                    b.HasIndex("GraphId");

                    b.HasIndex("ImageId");

                    b.ToTable("graph_nodes", (string)null);
                });

            modelBuilder.Entity("MovieGraphs.Data.Entities.ImageEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("data");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("last_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("images", (string)null);
                });

            modelBuilder.Entity("MovieGraphs.Data.Entities.TemplateEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("template");

                    b.HasKey("Id");

                    b.ToTable("templates", (string)null);
                });

            modelBuilder.Entity("MovieGraphs.Data.Entities.GraphEdgeEntity", b =>
                {
                    b.HasOne("MovieGraphs.Data.Entities.GraphNodeEntity", "SourceNode")
                        .WithMany("OutgoingEdges")
                        .HasForeignKey("SourceNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieGraphs.Data.Entities.GraphNodeEntity", "TargetNode")
                        .WithMany("IncomingEdges")
                        .HasForeignKey("TargetNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourceNode");

                    b.Navigation("TargetNode");
                });

            modelBuilder.Entity("MovieGraphs.Data.Entities.GraphNodeEntity", b =>
                {
                    b.HasOne("MovieGraphs.Data.Entities.GraphEntity", "Graph")
                        .WithMany("Nodes")
                        .HasForeignKey("GraphId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieGraphs.Data.Entities.ImageEntity", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Graph");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("MovieGraphs.Data.Entities.GraphEntity", b =>
                {
                    b.Navigation("Nodes");
                });

            modelBuilder.Entity("MovieGraphs.Data.Entities.GraphNodeEntity", b =>
                {
                    b.Navigation("IncomingEdges");

                    b.Navigation("OutgoingEdges");
                });
#pragma warning restore 612, 618
        }
    }
}
